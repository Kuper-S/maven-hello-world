name: Build and Deploy Pipeline

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:stable-dind
        options: --privileged
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Scan for Hardcoded Secrets Gitleaks
        run: |
          docker run --rm -v $(pwd):/wd -w /wd zricethezav/gitleaks protect --verbose --redact --staged

      - name: Dependency Check
        run: |
          cd myapp && mvn spotbugs:check

      - name: Scan Dockerfile for Vulnerabilities
        run: |
          cd myapp && docker run --rm -i hadolint/hadolint < Dockerfile

      - name: Checkout code
        uses: actions/checkout@main

      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will hand over control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: results.sarif


      - name: Build and Push Docker Image
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          docker build -t kupidun/java-app:${VERSION} --build-arg VERSION=${VERSION} .
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker image tag kupidun/java-app:$VERSION kupidun/java-app:latest
          docker image push kupidun/java-app:$VERSION
          docker image push kupidun/java-app:latest
        working-directory: ./myapp
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}


      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Write signing key to disk
        run: 'echo "$KEY" > cosign.key'
        shell: bash
        env:
           KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: Sign the published Docker image
        env:
            COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign sign --key cosign.key kupidun/java-app:$VERSION -y
          cosign sign --key cosign.key kupidun/java-app:latest -y
