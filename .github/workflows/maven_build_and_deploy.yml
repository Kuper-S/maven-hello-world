name: Build and Deploy Pipeline

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step to install GitGuardian CLI
      - name: Install GitGuardian CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -LO https://github.com/GitGuardian/gg-shield/releases/latest/download/install.sh -o install.sh
          ls -la
          chmod +x install.sh
          ./install.sh

     # Step to perform secret scanning within Git using GitGuardian
      - name: Secret Scanning with GitGuardian
        run: |
          gg-shield scan
        env:
          GG_API_KEY: ${{ secrets.GG_API_KEY }}

      # Step to install and configure client-side Git hooks for secret scanning
      - name: Install and Configure GitGuardian Git Hooks
        run: |
          gg-shield hook install --git
        env:
          GG_API_KEY: ${{ secrets.GG_API_KEY }}

      # Your existing steps for building and deploying Docker images
      - name: Build and Push Docker Image
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "${VERSION}"
          docker build -t kupidun/java-app:${VERSION} --build-arg VERSION=${VERSION} .
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker image tag kupidun/java-app:$VERSION kupidun/java-app:latest
          docker image push kupidun/java-app:$VERSION
          docker image push kupidun/java-app:latest
        working-directory: ./myapp
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}

      # Your existing steps for incrementing version and committing changes
      - name: Increment Patch Version and Commit
        run: |
          chmod +x versionScript.sh
          ./versionScript.sh
          echo "NEW_VERSION=$(./versionScript.sh)"
          git config --global user.name "${{ secrets.GIT_USER }}"
          git config --global user.email "${{ secrets.EMAIL }}"
          git add pom.xml
          git commit -m "Bump version [skip ci]"
          git push
        working-directory: ./myapp
