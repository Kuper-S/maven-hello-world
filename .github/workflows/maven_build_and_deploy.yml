name: Build and Deploy Pipeline

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2


      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
         java-version: 1.8


      - name: Compile Java Source Code
        run: mvn -f /home/runner/work/maven-hello-world/maven-hello-world/myapp/pom.xml compile


      - name: Run Tests
        run: mvn -f /home/runner/work/maven-hello-world/maven-hello-world/myapp/pom.xml test -Dtest=com.myapp.AppTest

      - name: Package Artifact
        run: mvn clean package
        working-directory: ./myapp


      - name: Increment Patch Version
        run: |
          chmod +x versionScript.sh
          ./versionScript.sh
          echo "NEW_VERSION=$(./versionScript.sh)"
        working-directory: ./myapp

      - name: Commit and Push Version Bump
        run: |
          git config --global user.name "${{ secrets.GIT_USER }}"
          git config --global user.email "${{ secrets.EMAIL }}"
          git add pom.xml
          git commit -m "Bump version [skip ci]"
          git push
        working-directory: ./myapp
        if: github.ref == 'refs/heads/master'

      - name: Create Artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: target/*.jar


      - name: Build Docker Image
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "${VERSION}"
          docker build -t kupidun/java-app:${VERSION} --build-arg VERSION=${VERSION} .
        working-directory: ./myapp


      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: List Docker Images
        run: docker images

      - name: Extract Version and Build/Push Docker Image
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Version extracted: $VERSION"
          docker image tag kupidun/java-app:$VERSION kupidun/java-app:latest
          docker image tag kupidun/java-app:$VERSION kupidun/java-app:$VERSION
          docker image push kupidun/java-app:$VERSION
          docker image push kupidun/java-app:latest
        working-directory: ./myapp


